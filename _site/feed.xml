<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.10.0">Jekyll</generator><link href="http://localhost:4000/https://busara-s.github.io/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/https://busara-s.github.io/" rel="alternate" type="text/html" /><updated>2025-01-24T20:57:49+07:00</updated><id>http://localhost:4000/https://busara-s.github.io/feed.xml</id><title type="html">Home</title><subtitle></subtitle><author><name>Busara Saelim</name><email>busara.saelim@gmail.com</email></author><entry><title type="html">What is Prompt Engineering and How to Write Prompts Effectively?</title><link href="http://localhost:4000/https://busara-s.github.io/2025/01/23/prompt-engineering.html" rel="alternate" type="text/html" title="What is Prompt Engineering and How to Write Prompts Effectively?" /><published>2025-01-23T00:00:00+07:00</published><updated>2025-01-23T00:00:00+07:00</updated><id>http://localhost:4000/https://busara-s.github.io/2025/01/23/prompt-engineering</id><content type="html" xml:base="http://localhost:4000/https://busara-s.github.io/2025/01/23/prompt-engineering.html"><![CDATA[<p>Prompt engineering is a specialized skill in the field of artificial intelligence (AI), particularly for working with Large Language Models (LLMs) like OpenAI’s GPT, Google’s Bard, or models available on Hugging Face. It involves crafting precise instructions (prompts) to guide an AI system to generate accurate, relevant, and valuable outputs. This skill is essential in optimizing the performance of AI systems across diverse applications, such as text generation, summarization, coding, or even art creation.</p>

<h2 id="what-is-prompt-engineering">What is Prompt Engineering?</h2>
<h3 id="definition">Definition</h3>
<p>Prompt engineering is the process of designing and refining input prompts to achieve desired outputs from AI models. It’s essentially a way of <code class="language-plaintext highlighter-rouge">“communicating”</code> with AI in its language to maximize its utility.</p>

<h3 id="importance-of-prompt-engineering">Importance of Prompt Engineering</h3>
<ol>
  <li>Maximizing Efficiency: A well-written prompt minimizes iterations and gets the result faster.</li>
  <li>Improving Accuracy: Helps in reducing vague, incomplete, or incorrect outputs.</li>
  <li>Enhancing Creativity: Unlocks the creative potential of AI systems by structuring queries effectively.</li>
  <li>Application Versatility: Enables effective use of LLMs across diverse domains such as programming, content creation, education, and customer service.</li>
</ol>

<h2 id="how-to-write-effective-prompts">How to Write Effective Prompts?</h2>
<h3 id="1-start-with-clear-instructions">1. Start with Clear Instructions</h3>
<p>Clearly define the task you want the AI to perform. Vague or generic instructions often lead to suboptimal results.</p>

<ul>
  <li>Example of a vague prompt:
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>"Write a report."
</code></pre></div>    </div>
  </li>
  <li>Improved prompt:
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>"Write a 300-word report on the environmental impact of electric vehicles, focusing on battery production and disposal."
</code></pre></div>    </div>
  </li>
</ul>

<h3 id="2-provide-context">2. Provide Context</h3>
<p>Include background details to help the AI better understand the task. Context ensures the response is relevant to your needs.</p>

<ul>
  <li>Without context:
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>"Explain Newton's Laws."
</code></pre></div>    </div>
  </li>
  <li>With context:
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>"Explain Newton's three laws of motion in simple terms for a middle school science class."
</code></pre></div>    </div>
  </li>
</ul>

<h3 id="3-use-step-by-step-instructions">3. Use Step-by-Step Instructions</h3>
<p>For complex tasks, break down the prompt into smaller steps or specify the desired structure of the output.</p>

<ul>
  <li>Example:
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>"Generate a step-by-step guide for setting up a Python environment using Miniconda, including downloading, installing, and creating a new environment."
</code></pre></div>    </div>
  </li>
</ul>

<h3 id="4-be-specific-about-the-output-format">4. Be Specific About the Output Format</h3>
<p>Clearly define the format you expect in the response (e.g., list, table, paragraph, or code block).</p>

<ul>
  <li>Example:
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>"List five benefits of renewable energy in bullet points."
"Generate Python code to create a bar chart using Matplotlib."
</code></pre></div>    </div>
  </li>
</ul>

<h3 id="5-use-examples-for-clarity">5. Use Examples for Clarity</h3>
<p>Provide examples in your prompt to guide the model toward the expected style, tone, or structure.</p>

<ul>
  <li>Example:
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>"Write a two-sentence summary of this article. For example, 'This article discusses climate change, focusing on global warming's effects on polar regions.' Now summarize the following text: [Insert text]."
</code></pre></div>    </div>
  </li>
</ul>

<h3 id="6-specify-the-tone-and-style">6. Specify the Tone and Style</h3>
<p>For creative or content-focused tasks, mention the tone, audience, or purpose.</p>

<ul>
  <li>Example:
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>"Write an engaging blog post on the benefits of AI in healthcare. Use a professional but conversational tone, suitable for a tech-savvy audience."
</code></pre></div>    </div>
  </li>
</ul>

<h3 id="7-experiment-and-iterate">7. Experiment and Iterate</h3>
<p>Prompts often require refinement. Test different versions and adjust based on the output until you achieve the desired results.</p>

<ul>
  <li>Example Iterations:
    <ul>
      <li>First attempt: <em>“Explain AI.”</em></li>
      <li>Refined prompt: <em>“Explain artificial intelligence (AI) and its applications in layman’s terms.”</em></li>
      <li>Final version: <em>“Explain artificial intelligence (AI), focusing on its real-world applications in healthcare and education, in simple language.”</em></li>
    </ul>
  </li>
</ul>

<h2 id="tips-for-advanced-prompt-engineering">Tips for Advanced Prompt Engineering</h2>
<ol>
  <li>Use Multi-Shot Prompts: Include examples of input and desired output for better guidance.
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>"Given the input 'Describe the Eiffel Tower,' the output should be 'The Eiffel Tower is a famous iron structure located in Paris, France.' Now describe the Statue of Liberty."
</code></pre></div>    </div>
  </li>
  <li>Leverage System-Level Prompts (if supported): Configure the AI’s behavior by using initial prompts that set rules or constraints.
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>"You are an expert mathematician. Solve this problem and explain the steps clearly: [Insert problem]."
</code></pre></div>    </div>
  </li>
  <li>Iterative Refinement: Use feedback from the AI’s initial response to adjust and improve subsequent prompts.</li>
  <li>Chain-of-Thought (CoT) Prompts: Encourage the model to reason through its response step by step.
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>"Explain why renewable energy is important. Start by describing the environmental challenges of fossil fuels, then discuss the advantages of renewable energy sources."
</code></pre></div>    </div>
  </li>
</ol>

<h2 id="common-mistakes-to-avoid">Common Mistakes to Avoid</h2>
<ol>
  <li>Being Too Vague: Avoid generic instructions that lead to unclear or irrelevant outputs.</li>
  <li>Overloading the Prompt: Don’t try to combine multiple unrelated tasks into a single prompt.</li>
  <li>Skipping Context: Omitting key details can result in generic or off-topic responses.</li>
  <li>Ignoring Iteration: Expect some trial and error—refining your prompts is part of the process.</li>
</ol>

<h2 id="example-writing-an-effective-prompt">Example: Writing an Effective Prompt</h2>
<h3 id="task-generate-an-introduction-for-a-blog-post">Task: Generate an Introduction for a Blog Post</h3>
<p>Ineffective Prompt:</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>"Write a blog introduction about AI."
</code></pre></div></div>

<p>Effective Prompt:</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>"Write a 150-word introduction for a blog post titled 'The Future of Artificial Intelligence.' Highlight its transformative impact on industries like healthcare, education, and finance. Use an engaging tone to capture the reader’s attention."
</code></pre></div></div>

<h2 id="conclusion">Conclusion</h2>
<p>Prompt engineering is a powerful technique for optimizing interactions with AI models. By following best practices—such as providing context, being specific, and refining through iteration—you can craft prompts that maximize the utility and accuracy of AI systems. Whether you’re generating text, solving problems, or coding, effective prompt engineering is your key to unlocking AI’s full potential.</p>]]></content><author><name>Busara Saelim</name><email>busara.saelim@gmail.com</email></author><summary type="html"><![CDATA[Prompt engineering is a specialized skill in the field of artificial intelligence (AI), particularly for working with Large Language Models (LLMs) like OpenAI’s GPT, Google’s Bard, or models available on Hugging Face. It involves crafting precise instructions (prompts) to guide an AI system to generate accurate, relevant, and valuable outputs. This skill is essential in optimizing the performance of AI systems across diverse applications, such as text generation, summarization, coding, or even art creation.]]></summary></entry><entry><title type="html">How to Use “Flux-Midjourney-Mix2-LoRA” Model on Hugging Face</title><link href="http://localhost:4000/https://busara-s.github.io/2025/01/22/Flux-Midjourney-Mix2-LoRA.html" rel="alternate" type="text/html" title="How to Use “Flux-Midjourney-Mix2-LoRA” Model on Hugging Face" /><published>2025-01-22T00:00:00+07:00</published><updated>2025-01-22T00:00:00+07:00</updated><id>http://localhost:4000/https://busara-s.github.io/2025/01/22/Flux-Midjourney-Mix2-LoRA</id><content type="html" xml:base="http://localhost:4000/https://busara-s.github.io/2025/01/22/Flux-Midjourney-Mix2-LoRA.html"><![CDATA[<p>The Flux-Midjourney-Mix2-LoRA model is designed to enhance the quality of generative images using the LoRA (Low-Rank Adaptation) technique. Follow this guide to get started with the model.</p>

<h2 id="step-1-set-up-your-environment">Step 1: Set Up Your Environment</h2>
<h3 id="1-install-required-libraries">1. Install Required Libraries</h3>
<p>Make sure you have Python installed, and then install the required libraries:</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>bash
pip install transformers diffusers accelerate torch
</code></pre></div></div>
<h3 id="2-clone-the-model-repository-optional">2. Clone the Model Repository (Optional)</h3>
<p>You can browse the repository directly or clone it to your local machine for reference:</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>bash
git clone https://huggingface.co/strangerzonehf/Flux-Midjourney-Mix2-LoRA
cd Flux-Midjourney-Mix2-LoRA
</code></pre></div></div>

<h2 id="step-2-load-the-model-in-python">Step 2: Load the Model in Python</h2>
<p>The model can be used with Hugging Face’s <code class="language-plaintext highlighter-rouge">diffusers</code> library. Here’s how to load and use it.</p>

<h3 id="code-example">Code Example</h3>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>python
from diffusers import StableDiffusionPipeline
import torch

# Load the model from Hugging Face
model_id = "strangerzonehf/Flux-Midjourney-Mix2-LoRA"

# Initialize the pipeline
pipeline = StableDiffusionPipeline.from_pretrained(
    model_id,
    torch_dtype=torch.float16
).to("cuda")  # Ensure you have a CUDA-capable GPU

# Set up prompt
prompt = "A futuristic cityscape with glowing neon lights"

# Generate an image
image = pipeline(prompt).images[0]

# Save the generated image
image.save("generated_image.png")
</code></pre></div></div>

<h2 id="step-3-fine-tune-the-model-optional">Step 3: Fine-Tune the Model (Optional)</h2>
<p>You can fine-tune the model using your custom dataset with LoRA layers. Here’s a high-level overview:</p>

<ol>
  <li>Prepare Your Dataset:
    <ul>
      <li>Collect images and prompts that match your use case.</li>
      <li>Ensure the images are preprocessed and formatted correctly (e.g., resolution matching the model’s requirements).</li>
    </ul>
  </li>
  <li>Install Additional Libraries:
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>bash
pip install datasets
</code></pre></div>    </div>
  </li>
  <li>Fine-Tuning Script: You can adapt Hugging Face’s training scripts to fine-tune the model. For more details, refer to the <a href="https://huggingface.co/docs/diffusers/index">Hugging Face Diffusers Documentation</a>.</li>
</ol>

<h2 id="step-4-adjust-lora-weights">Step 4: Adjust LoRA Weights</h2>
<p>LoRA allows you to adjust specific layers to control the output style. If you want more control over how LoRA modifies the model’s behavior, adjust the <code class="language-plaintext highlighter-rouge">scale</code> parameter during inference:</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>python
from diffusers import StableDiffusionPipeline, DPMSolverMultistepScheduler
import torch

# Load the model
pipeline = StableDiffusionPipeline.from_pretrained(model_id, torch_dtype=torch.float16)
pipeline.scheduler = DPMSolverMultistepScheduler.from_config(pipeline.scheduler.config)

# Set LoRA weights
pipeline.unet.set_default_attn_processor(scale=0.8)  # Adjust scale to control adaptation

# Generate an image
prompt = "A dreamy forest with magical lighting"
image = pipeline(prompt).images[0]
image.save("dreamy_forest.png")
</code></pre></div></div>

<h2 id="step-5-run-inference-on-google-colab-optional">Step 5: Run Inference on Google Colab (Optional)</h2>
<p>If you don’t have a GPU locally, you can use [Google Colab] for free:</p>

<ol>
  <li>Open <a href="https://colab.google/">Google Colab</a>.</li>
  <li>Enable GPU: Go to Runtime &gt; Change Runtime Type &gt; GPU.</li>
  <li>Run the following setup code :
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code> python
 !pip install transformers diffusers accelerate torch
 from diffusers import StableDiffusionPipeline
 import torch

 model_id = "strangerzonehf/Flux-Midjourney-Mix2-LoRA"

 pipeline = StableDiffusionPipeline.from_pretrained(
     model_id,
     torch_dtype=torch.float16
 ).to("cuda")

 prompt = "A serene beach during sunset"
 image = pipeline(prompt).images[0]
 image.save("sunset_beach.png")
</code></pre></div>    </div>
  </li>
  <li>Download the generated image from Colab.</li>
</ol>

<h2 id="step-6-experiment-with-prompts">Step 6: Experiment with Prompts</h2>
<p>The Flux-Midjourney-Mix2-LoRA model excels with detailed prompts. Here are a few examples to try:</p>

<ul>
  <li>Simple Prompt:
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>A cyberpunk street with holographic signs
</code></pre></div>    </div>
  </li>
  <li>Advanced Prompt:
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>A high-resolution digital painting of a futuristic space station orbiting Earth, ultra-realistic, highly detailed, vibrant colors
</code></pre></div>    </div>
  </li>
  <li>Abstract Prompt:
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>An ethereal dreamscape with floating islands and waterfalls, glowing softly under a twilight sky
</code></pre></div>    </div>
  </li>
</ul>

<h2 id="step-7-share-your-results">Step 7: Share Your Results</h2>
<p>Once you’ve generated images, share your results! You can:</p>

<ul>
  <li>Upload them to social media or platforms like <a href="https://www.artstation.com/">ArtStation</a>.</li>
  <li>Share your prompt and settings to help others replicate the results.</li>
</ul>

<h2 id="additional-tips">Additional Tips</h2>
<ul>
  <li>Optimize Performance: Use <code class="language-plaintext highlighter-rouge">torch_dtype=torch.float16</code> and run the model on a GPU for faster inference.</li>
  <li>Experiment with LoRA Weights: Adjust the scaling to fine-tune how much LoRA modifies the output.</li>
  <li>Explore the Community: Check out other models and examples on <a href="https://huggingface.co/">Hugging Face</a>.</li>
</ul>]]></content><author><name>Busara Saelim</name><email>busara.saelim@gmail.com</email></author><summary type="html"><![CDATA[The Flux-Midjourney-Mix2-LoRA model is designed to enhance the quality of generative images using the LoRA (Low-Rank Adaptation) technique. Follow this guide to get started with the model.]]></summary></entry><entry><title type="html">Setting Up a Python Environment with Miniconda</title><link href="http://localhost:4000/https://busara-s.github.io/2025/01/22/setup-python-env.html" rel="alternate" type="text/html" title="Setting Up a Python Environment with Miniconda" /><published>2025-01-22T00:00:00+07:00</published><updated>2025-01-22T00:00:00+07:00</updated><id>http://localhost:4000/https://busara-s.github.io/2025/01/22/setup-python-env</id><content type="html" xml:base="http://localhost:4000/https://busara-s.github.io/2025/01/22/setup-python-env.html"><![CDATA[<p>Miniconda is a lightweight version of Anaconda that includes only Conda, Python, and the packages they depend on. It’s ideal for creating isolated Python environments without the bulk of a full Anaconda installation.</p>

<p>This tutorial will guide you through setting up a Python environment using Miniconda.</p>

<h2 id="1-install-miniconda">1. Install Miniconda</h2>
<h3 id="step-1-download-miniconda">Step 1: Download Miniconda</h3>
<ol>
  <li>Visit the <a href="https://docs.anaconda.com/miniconda/install/#">Miniconda downloads page</a>.</li>
  <li>Choose the appropriate installer for your operating system (Windows, macOS, or Linux).
<img src="\public\img\minicon_download.png" alt="img" /></li>
  <li>Download the installer.</li>
</ol>

<h3 id="step-2-install-miniconda">Step 2: Install Miniconda</h3>
<ol>
  <li>Run the installer:
    <ul>
      <li>Windows: Double-click the <code class="language-plaintext highlighter-rouge">.exe</code> file and follow the instructions.
<img src="\public\img\minicon_install.png" alt="img" /></li>
      <li>macOS/Linux: Open a terminal and run the <code class="language-plaintext highlighter-rouge">.sh</code> script:
        <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code> bash
 bash Miniconda3-latest-Linux-x86_64.sh
</code></pre></div>        </div>
      </li>
    </ul>
  </li>
  <li>Accept the license agreement.</li>
  <li>Choose the installation location (e.g., <code class="language-plaintext highlighter-rouge">~/miniconda3</code>).</li>
  <li>Add Miniconda to your PATH when prompted.</li>
</ol>

<h3 id="step-3-verify-installation">Step 3: Verify Installation</h3>
<p>Open a terminal (or command prompt) and run:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>bash
conda --version
</code></pre></div></div>
<p><img src="\public\img\conda-ver.png" alt="img" />
You should see the Conda version displayed.</p>

<h2 id="2-create-a-new-python-environment">2. Create a New Python Environment</h2>
<h3 id="step-1-update-conda">Step 1: Update Conda</h3>
<p>Before creating an environment, update Conda to the latest version:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>bash
conda update -n base -c defaults conda
</code></pre></div></div>

<h3 id="step-2-create-the-environment">Step 2: Create the Environment</h3>
<p>Create a new environment with a specific Python version:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>bash
conda create --name myenv python=3.9
</code></pre></div></div>

<ul>
  <li>Replace <code class="language-plaintext highlighter-rouge">myenv</code> with your desired environment name.</li>
  <li>Replace <code class="language-plaintext highlighter-rouge">3.9</code> with the Python version you need.</li>
</ul>

<h3 id="step-3-activate-the-environment">Step 3: Activate the Environment</h3>
<p>Activate the newly created environment:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>bash
conda activate myenv
</code></pre></div></div>

<p>Your terminal prompt should change to indicate the active environment (e.g., <code class="language-plaintext highlighter-rouge">(myenv)</code>).</p>

<h2 id="3-install-packages-in-the-environment">3. Install Packages in the Environment</h2>
<h3 id="using-conda">Using Conda</h3>
<p>Install packages available in the Conda repository:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>bash
conda install numpy pandas matplotlib
</code></pre></div></div>

<h3 id="using-pip">Using pip</h3>
<p>For packages not available in Conda, use <code class="language-plaintext highlighter-rouge">pip</code>:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>bash
pip install package_name
</code></pre></div></div>

<h3 id="check-installed-packages">Check Installed Packages</h3>
<p>List all installed packages in the environment:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>bash
conda list
</code></pre></div></div>

<h2 id="4-manage-environments">4. Manage Environments</h2>
<h3 id="deactivate-the-environment">Deactivate the Environment</h3>
<p>When done, deactivate the environment:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>bash
conda deactivate
</code></pre></div></div>

<h3 id="list-all-environments">List All Environments</h3>
<p>View all Conda environments on your system:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>bash
conda env list
</code></pre></div></div>

<h3 id="remove-an-environment">Remove an Environment</h3>
<p>Delete an unused environment:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>bash
conda remove --name myenv --all
</code></pre></div></div>

<h2 id="5-configure-miniconda-for-projects">5. Configure Miniconda for Projects</h2>
<h3 id="step-1-create-a-requirementstxt-file">Step 1: Create a <code class="language-plaintext highlighter-rouge">requirements.txt</code> File</h3>
<p>List all required packages for your project:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>txt
numpy==1.21.0
pandas==1.3.0
</code></pre></div></div>

<h3 id="step-2-install-packages-from-requirementstxt">Step 2: Install Packages from <code class="language-plaintext highlighter-rouge">requirements.txt</code></h3>
<p>Install the listed packages:</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>bash
pip install -r requirements.txt
</code></pre></div></div>

<h3 id="step-3-export-the-environment">Step 3: Export the Environment</h3>
<p>Share your environment setup:</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>bash
conda env export &gt; environment.yml
</code></pre></div></div>

<h3 id="step-4-recreate-the-environment">Step 4: Recreate the Environment</h3>
<p>Create a new environment from the <code class="language-plaintext highlighter-rouge">.yml</code> file:</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>bash
conda env create -f environment.yml
</code></pre></div></div>

<h2 id="6-troubleshooting">6. Troubleshooting</h2>
<h3 id="common-issues-and-fixes">Common Issues and Fixes</h3>
<ul>
  <li>Environment not activating: Ensure Conda is added to your PATH. Run:
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  bash
  conda init
</code></pre></div>    </div>

    <p>Then restart your terminal.</p>
  </li>
  <li>Package conflicts: Use Conda’s solver to manage conflicts:
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  bash
  conda install package_name --solver=libmamba
</code></pre></div>    </div>
  </li>
</ul>

<h2 id="conclusion">Conclusion</h2>
<p>Miniconda is a versatile tool for managing Python environments and dependencies efficiently. By following this tutorial, you can set up a clean, isolated environment for your Python projects, ensuring reproducibility and reducing conflicts.</p>]]></content><author><name>Busara Saelim</name><email>busara.saelim@gmail.com</email></author><summary type="html"><![CDATA[Miniconda is a lightweight version of Anaconda that includes only Conda, Python, and the packages they depend on. It’s ideal for creating isolated Python environments without the bulk of a full Anaconda installation.]]></summary></entry><entry><title type="html">A Beginner’s Guide to Markdown (.md) File Type</title><link href="http://localhost:4000/https://busara-s.github.io/2025/01/21/md-file.html" rel="alternate" type="text/html" title="A Beginner’s Guide to Markdown (.md) File Type" /><published>2025-01-21T00:00:00+07:00</published><updated>2025-01-21T00:00:00+07:00</updated><id>http://localhost:4000/https://busara-s.github.io/2025/01/21/md-file</id><content type="html" xml:base="http://localhost:4000/https://busara-s.github.io/2025/01/21/md-file.html"><![CDATA[<p>Markdown is a lightweight markup language that allows you to format text using a plain-text editor. Files written in Markdown use the <code class="language-plaintext highlighter-rouge">.md</code> or <code class="language-plaintext highlighter-rouge">.markdown</code> file extension and are widely used for documentation, README files, blog posts, and technical writing.</p>

<h2 id="why-use-markdown">Why Use Markdown?</h2>
<ul>
  <li>Simplicity: Easy to learn and read.</li>
  <li>Portability: Works with most text editors and version control systems like GitHub.</li>
  <li>Flexibility: Converts to various formats like HTML, PDF, or Word.</li>
  <li>Compatibility: Used in platforms like GitHub, Jekyll, and Hugo for websites and documentation.</li>
</ul>

<h2 id="getting-started-with-markdown">Getting Started with Markdown</h2>
<h3 id="basic-syntax">Basic Syntax</h3>
<p>Markdown uses special characters to format text. Here’s a quick overview:</p>

<ol>
  <li>Headings
    <ul>
      <li>Use <code class="language-plaintext highlighter-rouge">#</code> symbols to create headings. The number of <code class="language-plaintext highlighter-rouge">#</code> determines the heading level.
        <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>markdown
# Heading 1
## Heading 2
### Heading 3
</code></pre></div>        </div>
      </li>
    </ul>
  </li>
  <li>Emphasis
    <ul>
      <li>Use <code class="language-plaintext highlighter-rouge">*</code> or <code class="language-plaintext highlighter-rouge">_</code> for italics and <code class="language-plaintext highlighter-rouge">**</code> or <code class="language-plaintext highlighter-rouge">__</code> for bold.
        <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code> markdown
 *Italic* or _Italic_
 **Bold** or __Bold__
</code></pre></div>        </div>
      </li>
    </ul>
  </li>
  <li>Lists
    <ul>
      <li>Unordered: Use <code class="language-plaintext highlighter-rouge">-</code>, <code class="language-plaintext highlighter-rouge">*</code>, or <code class="language-plaintext highlighter-rouge">+</code>.</li>
    </ul>

    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code> markdown
 - Item 1
 - Item 2
</code></pre></div>    </div>

    <ul>
      <li>Ordered: Use numbers followed by a period.
        <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code> markdown
 1. First item
 2. Second item
</code></pre></div>        </div>
      </li>
    </ul>
  </li>
  <li>Links
    <ul>
      <li><code class="language-plaintext highlighter-rouge">[Text](URL)</code>
        <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code> markdown
 [Visit GitHub](https://github.com)
</code></pre></div>        </div>
      </li>
    </ul>
  </li>
  <li>Images
    <ul>
      <li><code class="language-plaintext highlighter-rouge">![Alt Text](Image URL)</code>
        <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code> markdown
 ![Sample Image](https://example.com/image.png)
</code></pre></div>        </div>
      </li>
    </ul>
  </li>
  <li>Code Blocks
    <ul>
      <li>Inline code: Use backticks (`).
        <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code> markdown
 Inline `code snippet`
</code></pre></div>        </div>
      </li>
    </ul>
  </li>
</ol>

<ul>
  <li>Block code: Use triple backticks (```).
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  markdown
  def hello_world(): print("Hello, World!")
</code></pre></div>    </div>
  </li>
</ul>

<h3 id="advanced-markdown-features">Advanced Markdown Features</h3>
<ol>
  <li>Blockquotes
    <ul>
      <li>Use <code class="language-plaintext highlighter-rouge">&gt;</code> to create blockquotes.
        <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>markdown
&gt; This is a blockquote.
</code></pre></div>        </div>
      </li>
    </ul>
  </li>
  <li>Horizontal Rule
    <ul>
      <li>Use <code class="language-plaintext highlighter-rouge">---</code>, <code class="language-plaintext highlighter-rouge">***</code>, or <code class="language-plaintext highlighter-rouge">___</code> for a horizontal line.
        <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>markdown
---
</code></pre></div>        </div>
      </li>
    </ul>
  </li>
  <li>Tables
    <ul>
      <li>Use <code class="language-plaintext highlighter-rouge">|</code> to create tables.
        <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>markdown
| Column 1 | Column 2 | Column 3 |
|----------|----------|----------|
| Row 1    | Value 1  | Value 2  |
| Row 2    | Value 3  | Value 4  |
</code></pre></div>        </div>
      </li>
    </ul>
  </li>
  <li>Task Lists
    <ul>
      <li>Use <code class="language-plaintext highlighter-rouge">- [ ]</code> for unchecked tasks and <code class="language-plaintext highlighter-rouge">- [x]</code> for checked ones.</li>
    </ul>

    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code> markdown
 - [x] Completed task
 - [ ] Pending task
</code></pre></div>    </div>
  </li>
  <li>Footnotes
    <ul>
      <li>Use <code class="language-plaintext highlighter-rouge">[^1]</code> for footnotes.</li>
    </ul>

    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code> markdown
 Here is a sentence with a footnote.[^1]

 [^1]: This is the footnote text.
</code></pre></div>    </div>
  </li>
</ol>

<h2 id="using-markdown-for-github-pages">Using Markdown for GitHub Pages</h2>
<ul>
  <li>Create a <code class="language-plaintext highlighter-rouge">README.md</code> file for your repository.</li>
  <li>Use Markdown to format project documentation.</li>
  <li>Preview Markdown directly in GitHub to ensure correct formatting.</li>
</ul>

<h2 id="markdown-editors-and-tools">Markdown Editors and Tools</h2>
<h4 id="popular-markdown-editors">Popular Markdown Editors</h4>
<ol>
  <li>Visual Studio Code: Supports Markdown editing with live preview.</li>
  <li>Typora: A WYSIWYG Markdown editor.</li>
  <li>Obsidian: Ideal for note-taking with Markdown.</li>
  <li>Dillinger: An online Markdown editor.</li>
</ol>

<h4 id="markdown-preview-tools">Markdown Preview Tools</h4>
<ul>
  <li>Most Markdown editors provide a preview pane.</li>
  <li>Use online tools like <a href="https://markdownlivepreview.com/">Markdown Live Preview</a> to see formatted content.</li>
</ul>

<h2 id="tips-for-writing-in-markdown">Tips for Writing in Markdown</h2>
<ol>
  <li>Use headings to organize content.</li>
  <li>Keep lines short to make editing easier.</li>
  <li>Use comments (<code class="language-plaintext highlighter-rouge">&lt;!-- Comment --&gt;</code>) for notes that won’t appear in the output.</li>
  <li>
    <p>Combine Markdown with HTML for advanced formatting.</p>

    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code> markdown
 &lt;div style="color: red;"&gt;This is red text.&lt;/div&gt;
</code></pre></div>    </div>
  </li>
</ol>

<h2 id="converting-markdown">Converting Markdown</h2>
<p>Markdown can be converted to formats like:</p>

<ul>
  <li>HTML: Tools like <code class="language-plaintext highlighter-rouge">pandoc</code> or online converters.</li>
  <li>PDF: Use tools like <code class="language-plaintext highlighter-rouge">markdown-pdf</code> or export options in editors.</li>
  <li>Word: Convert via pandoc or online tools.</li>
</ul>

<h2 id="conclusion">Conclusion</h2>
<p>Markdown is an essential tool for writing clean and structured text in a simple format. Whether you’re writing documentation, creating a blog post, or managing README files, mastering Markdown will make your work more efficient and professional.</p>]]></content><author><name>Busara Saelim</name><email>busara.saelim@gmail.com</email></author><summary type="html"><![CDATA[Markdown is a lightweight markup language that allows you to format text using a plain-text editor. Files written in Markdown use the .md or .markdown file extension and are widely used for documentation, README files, blog posts, and technical writing.]]></summary></entry><entry><title type="html">How to Set Up Git- A Step-by-Step Guide</title><link href="http://localhost:4000/https://busara-s.github.io/2025/01/20/setup-git.html" rel="alternate" type="text/html" title="How to Set Up Git- A Step-by-Step Guide" /><published>2025-01-20T00:00:00+07:00</published><updated>2025-01-20T00:00:00+07:00</updated><id>http://localhost:4000/https://busara-s.github.io/2025/01/20/setup-git</id><content type="html" xml:base="http://localhost:4000/https://busara-s.github.io/2025/01/20/setup-git.html"><![CDATA[<p>Git is a popular version control system used by developers to track code changes, collaborate with others, and manage project versions. This guide will walk you through setting up Git on your local machine.</p>

<h2 id="step-1-install-git">Step 1: Install Git</h2>
<h3 id="on-windows">On Windows:</h3>
<ol>
  <li>Download the Git installer from the <a href="https://git-scm.com/">Git</a> website.</li>
  <li>Run the installer and follow the prompts:
 <img src="\public\img\git_install.png" alt="img" />
    <ul>
      <li>Select the default editor (e.g., Vim, Nano, or Notepad++).</li>
      <li>Choose “Git from the command line and also from 3rd-party software.”</li>
      <li>Use the recommended options unless you have specific preferences.</li>
    </ul>
  </li>
  <li>Click Finish to complete the installation.</li>
</ol>

<h3 id="on-macos">On macOS:</h3>
<ol>
  <li>Open Terminal.</li>
  <li>Install Git using Homebrew:
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>bash
brew install git
</code></pre></div>    </div>
  </li>
</ol>

<h3 id="on-linux">On Linux:</h3>
<ol>
  <li>Open Terminal.</li>
  <li>Install Git using your package manager:
    <ul>
      <li>Ubuntu/Debian:
        <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  bash
  sudo apt update
  sudo apt install git
</code></pre></div>        </div>
      </li>
      <li>Fedora:
        <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  bash
  sudo dnf install git
</code></pre></div>        </div>
      </li>
    </ul>
  </li>
</ol>

<h2 id="step-2-verify-the-installation">Step 2: Verify the Installation</h2>
<p>Once installed, verify Git by checking its version:</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>bash
git --version
</code></pre></div></div>
<p><img src="\public\img\git_ver.png" alt="img" />
If Git is installed, it will display the installed version.</p>

<h2 id="step-3-configure-git">Step 3: Configure Git</h2>
<p>Before using Git, configure your identity and preferences.</p>

<h3 id="set-your-name-and-email">Set Your Name and Email:</h3>
<p>Run the following commands to set your name and email address:</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>bash
git config --global user.name "Your Name"
git config --global user.email "your.email@example.com"
</code></pre></div></div>
<h3 id="check-your-configuration">Check Your Configuration:</h3>
<p>To see the settings you’ve configured, use:</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>bash
git config --list
</code></pre></div></div>

<h2 id="step-4-set-up-ssh-optional">Step 4: Set Up SSH (Optional)</h2>
<p>Using SSH keys makes it easier and more secure to interact with remote repositories.</p>

<ol>
  <li>Generate an SSH Key:
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>bash
ssh-keygen -t rsa -b 4096 -C "your.email@example.com"
</code></pre></div>    </div>
    <p>Press Enter to save the key in the default location and set a passphrase (optional).</p>
  </li>
  <li>Add the SSH Key to the Agent:
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>bash
eval "$(ssh-agent -s)"
ssh-add ~/.ssh/id_rsa
</code></pre></div>    </div>
  </li>
  <li>Add the SSH Key to Your GitHub Account:
    <ul>
      <li>Copy the SSH key:
        <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code> bash
 cat ~/.ssh/id_rsa.pub
</code></pre></div>        </div>
      </li>
      <li>Go to your GitHub profile &gt; Settings &gt; SSH and GPG keys &gt; New SSH key.</li>
      <li>Paste the copied key and save.</li>
    </ul>
  </li>
</ol>

<h2 id="step-5-create-a-git-repository">Step 5: Create a Git Repository</h2>
<h3 id="initialize-a-local-repository">Initialize a Local Repository:</h3>
<ol>
  <li>Navigate to the folder you want to track:
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>bash
cd /path/to/your/project
</code></pre></div>    </div>
  </li>
  <li>Initialize Git in the folder:
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>bash
git init
</code></pre></div>    </div>
    <h3 id="clone-a-remote-repository">Clone a Remote Repository:</h3>
    <p>If you’re working on an existing project, clone the repository:</p>
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>bash
git clone &lt;repository-url&gt;
</code></pre></div>    </div>
  </li>
</ol>

<h2 id="step-6-basic-git-commands">Step 6: Basic Git Commands</h2>
<p>Here are some essential Git commands to get you started:</p>

<h3 id="add-files-to-the-staging-area">Add Files to the Staging Area:</h3>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>bash
git add &lt;file-name&gt;        # Add a specific file
git add .                  # Add all changes in the current directory
</code></pre></div></div>
<h3 id="commit-changes">Commit Changes:</h3>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>bash
git commit -m "Your commit message"
</code></pre></div></div>
<h3 id="push-changes-to-remote">Push Changes to Remote:</h3>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>bash
git push origin main       # Push changes to the main branch
</code></pre></div></div>
<h3 id="pull-changes-from-remote">Pull Changes from Remote:</h3>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>bash
git pull origin main       # Pull updates from the main branch
</code></pre></div></div>
<h3 id="check-the-status-of-your-repository">Check the Status of Your Repository:</h3>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>bash
git status
</code></pre></div></div>
<h3 id="view-commit-history">View Commit History:</h3>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>bash
git log
</code></pre></div></div>

<h2 id="step-7-advanced-configuration-optional">Step 7: Advanced Configuration (Optional)</h2>
<h3 id="set-a-default-branch-name">Set a Default Branch Name:</h3>
<p>Change the default branch name (e.g., to <code class="language-plaintext highlighter-rouge">main</code>):</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>bash
git config --global init.defaultBranch main
</code></pre></div></div>
<h3 id="enable-git-aliases">Enable Git Aliases:</h3>
<p>Set up shortcuts for common commands:</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>bash
git config --global alias.st status
git config --global alias.co checkout
git config --global alias.br branch
git config --global alias.cm commit
</code></pre></div></div>
<p>Now you can use <code class="language-plaintext highlighter-rouge">git st</code> instead of <code class="language-plaintext highlighter-rouge">git status</code>, and so on.</p>

<h2 id="step-8-practice-git-with-a-sample-workflow">Step 8: Practice Git with a Sample Workflow</h2>
<ol>
  <li>Create a file in your project:
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>bash
echo "Hello, Git!" &gt; hello.txt
</code></pre></div>    </div>
  </li>
  <li>Add the file to the staging area:
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>bash
git add hello.txt
</code></pre></div>    </div>
  </li>
  <li>Commit the changes:
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>bash
git commit -m "Add hello.txt"
</code></pre></div>    </div>
  </li>
  <li>Push the changes to a remote repository:
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>bash
git remote add origin &lt;repository-url&gt;
git push -u origin main
</code></pre></div>    </div>
  </li>
</ol>

<h2 id="step-9-explore-further">Step 9: Explore Further</h2>
<p>Learn more advanced Git features like branching, merging, and rebasing.
Use GUIs for Git like <a href="https://github.com/apps/desktop">GitHub Desktop</a> or <a href="https://www.sourcetreeapp.com/">Sourcetree</a>.</p>]]></content><author><name>Busara Saelim</name><email>busara.saelim@gmail.com</email></author><summary type="html"><![CDATA[Git is a popular version control system used by developers to track code changes, collaborate with others, and manage project versions. This guide will walk you through setting up Git on your local machine.]]></summary></entry><entry><title type="html">How to Customize a GitHub Page Using Jekyll Template</title><link href="http://localhost:4000/https://busara-s.github.io/2025/01/19/jekyll-template.html" rel="alternate" type="text/html" title="How to Customize a GitHub Page Using Jekyll Template" /><published>2025-01-19T00:00:00+07:00</published><updated>2025-01-19T00:00:00+07:00</updated><id>http://localhost:4000/https://busara-s.github.io/2025/01/19/jekyll-template</id><content type="html" xml:base="http://localhost:4000/https://busara-s.github.io/2025/01/19/jekyll-template.html"><![CDATA[<p><img src="\public\img\jekylltheme.png" alt="img" /></p>

<p>GitHub Pages integrates seamlessly with <a href="https://jekyllrb.com/">Jekyll</a>, a static site generator, allowing you to create and customize professional websites easily. Follow this step-by-step guide to set up and customize your page using a Jekyll template.</p>

<h2 id="step-1-enable-jekyll-on-your-github-page">Step 1: Enable Jekyll on Your GitHub Page</h2>
<ol>
  <li>Create a Repository:
    <ul>
      <li>Go to <a href="https://github.com/">GitHub</a>.</li>
      <li>Create a new repository and name it (e.g., <code class="language-plaintext highlighter-rouge">my-blog</code>).</li>
      <li>Add a README.md file and set the repository to Public.</li>
    </ul>
  </li>
  <li>Enable GitHub Pages:
    <ul>
      <li>Go to the Settings tab of your repository.</li>
      <li>Navigate to the Pages section.</li>
      <li>Under Branch, select <code class="language-plaintext highlighter-rouge">main</code> or another branch you want to publish from, then click Save.</li>
    </ul>
  </li>
  <li>Select a Jekyll Theme:
    <ul>
      <li>Under Settings &gt; Pages, click Change Theme.</li>
      <li>Browse the available Jekyll themes and click Select Theme to apply.</li>
    </ul>
  </li>
</ol>

<h2 id="step-2-clone-the-repository-locally">Step 2: Clone the Repository Locally</h2>
<ol>
  <li>Clone your repository to your local machine:
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  bash
  git clone https://github.com/&lt;your-username&gt;/&lt;repository-name&gt;.git
</code></pre></div>    </div>
  </li>
  <li>Navigate to the cloned directory:
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  bash
  cd &lt;repository-name&gt;
</code></pre></div>    </div>
  </li>
</ol>

<h2 id="step-3-install-jekyll-locally">Step 3: Install Jekyll Locally</h2>
<p>Installing Jekyll locally allows you to preview changes before pushing them to GitHub.</p>

<h3 id="install-prerequisites">Install Prerequisites:</h3>

<ul>
  <li>Install Ruby (latest stable version).</li>
  <li>Install the Bundler and Jekyll gems:
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>bash
gem install bundler jekyll
</code></pre></div>    </div>
  </li>
</ul>

<h3 id="set-up-jekyll">Set Up Jekyll:</h3>
<ol>
  <li>Initialize Jekyll in your project:
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  bash
  jekyll new --skip-bundle .
</code></pre></div>    </div>
  </li>
  <li>Install dependencies:
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  bash
  bundle install
</code></pre></div>    </div>
  </li>
  <li>Preview your site locally:
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  bash
  bundle exec jekyll serve
</code></pre></div>    </div>
  </li>
</ol>

<p>Open <code class="language-plaintext highlighter-rouge">http://localhost:4000</code> to view your site.</p>

<h2 id="step-4-customize-your-jekyll-site">Step 4: Customize Your Jekyll Site</h2>
<h3 id="1-edit-configuration-_configyml">1. Edit Configuration (<code class="language-plaintext highlighter-rouge">_config.yml</code>)</h3>
<p>The <code class="language-plaintext highlighter-rouge">_config.yml</code> file contains global site settings.</p>

<p>Key fields to update:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>yaml
title: My Jekyll Site
description: A portfolio showcasing my projects
baseurl: "" # Leave empty for GitHub Pages
url: "https://&lt;your-username&gt;.github.io"
author:
  name: Your Name
  email: your-email@example.com
</code></pre></div></div>

<h3 id="2-add-or-edit-pages">2. Add or Edit Pages</h3>
<p>Create or edit <code class="language-plaintext highlighter-rouge">.html</code> or <code class="language-plaintext highlighter-rouge">.md</code> files in the repository:</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">index.md</code>: The homepage.</li>
  <li><code class="language-plaintext highlighter-rouge">about.md</code>: Your “About” page.</li>
</ul>

<p>Example for an <code class="language-plaintext highlighter-rouge">about.md</code> file:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>---
layout: default
title: About Me
---

# About Me

Welcome to my website! I'm passionate about AI and technology. Here, I share my projects and learning journey.
</code></pre></div></div>

<h3 id="3-modify-layouts">3. Modify Layouts</h3>
<ul>
  <li>Go to the <code class="language-plaintext highlighter-rouge">_layouts</code> directory.</li>
  <li>
    <p>Edit or create custom HTML templates for your pages.
Example <code class="language-plaintext highlighter-rouge">default.html</code> layout:</p>

    <p><img src="\public\img\default-html.png" alt="img" /></p>
  </li>
</ul>

<h3 id="4-add-a-blog">4. Add a Blog</h3>
<ol>
  <li>Create a <code class="language-plaintext highlighter-rouge">_posts</code> folder.</li>
  <li>Add blog posts in the format <code class="language-plaintext highlighter-rouge">YYYY-MM-DD-title.md</code>.</li>
</ol>

<p>Example blog post:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>markdown

---
layout: post
title: "My First Blog Post"
date: 2025-01-18
---

# Welcome to My Blog

This is my first post about Jekyll customization!
</code></pre></div></div>

<h3 id="5-customize-styling">5. Customize Styling</h3>
<ol>
  <li>Add a <code class="language-plaintext highlighter-rouge">assets/css</code> directory.</li>
  <li>Create or edit <code class="language-plaintext highlighter-rouge">style.css</code> and link it in <code class="language-plaintext highlighter-rouge">_config.yml</code> or layouts:</li>
</ol>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>html
&lt;link rel="stylesheet" href="/assets/css/style.css"&gt;
</code></pre></div></div>

<h2 id="step-5-push-changes-to-github">Step 5: Push Changes to GitHub</h2>
<ol>
  <li>Commit and push your updates:
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  bash
  git add .
  git commit -m "Customize Jekyll site"
  git push
</code></pre></div>    </div>
  </li>
  <li>Visit your GitHub Page URL to view the updated site.</li>
</ol>

<h2 id="step-6-advanced-customizations">Step 6: Advanced Customizations</h2>
<ul>
  <li>Plugins: Add plugins to <code class="language-plaintext highlighter-rouge">_config.yml</code> for extra features. Example:</li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>yaml
plugins:
  - jekyll-seo-tag
  - jekyll-sitemap
</code></pre></div></div>

<p>Install plugins locally with:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>bash
bundle install
</code></pre></div></div>

<h2 id="step-7-maintain-your-site">Step 7: Maintain Your Site</h2>
<ul>
  <li>Update content regularly.</li>
  <li>Test locally before pushing changes.</li>
  <li>Submit your sitemap to search engines for better SEO.</li>
</ul>]]></content><author><name>Busara Saelim</name><email>busara.saelim@gmail.com</email></author><summary type="html"><![CDATA[]]></summary></entry><entry><title type="html">How to Create a GitHub Page</title><link href="http://localhost:4000/https://busara-s.github.io/2025/01/18/howto-create-githubpage.html" rel="alternate" type="text/html" title="How to Create a GitHub Page" /><published>2025-01-18T00:00:00+07:00</published><updated>2025-01-18T00:00:00+07:00</updated><id>http://localhost:4000/https://busara-s.github.io/2025/01/18/howto-create-githubpage</id><content type="html" xml:base="http://localhost:4000/https://busara-s.github.io/2025/01/18/howto-create-githubpage.html"><![CDATA[<p>GitHub Pages is a free service that allows you to host websites directly from your GitHub repository. Follow this step-by-step guide to create your GitHub Page.</p>

<p><img src="\public\img\github.png" alt="img" /></p>

<h2 id="step-1-set-up-a-github-repository">Step 1: Set Up a GitHub Repository</h2>
<ol>
  <li>Log in to GitHub: Go to <a href="https://github.com/">GitHub</a> and log in to your account.</li>
  <li>Create a New Repository:
    <ul>
      <li>Click the + button in the top-right corner and select New repository.</li>
      <li>Enter a repository name (e.g., <code class="language-plaintext highlighter-rouge">my-portfolio</code>).</li>
      <li>Set the repository to Public (required for GitHub Pages).</li>
      <li>Check Add a README file.</li>
      <li>Click Create repository.</li>
    </ul>
  </li>
</ol>

<h2 id="step-2-add-your-website-files">Step 2: Add Your Website Files</h2>
<ol>
  <li>Clone the repository to your local machine:
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>bash
git clone https://github.com/&lt;your-username&gt;/&lt;repository-name&gt;.git
</code></pre></div>    </div>
  </li>
  <li>Add your website files (e.g., <code class="language-plaintext highlighter-rouge">index.html</code>, <code class="language-plaintext highlighter-rouge">style.css</code>, and images) to the repository folder.</li>
  <li>Commit and push the changes:
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>bash
git add .
git commit -m "Add website files"
git push
</code></pre></div>    </div>
  </li>
</ol>

<h2 id="step-3-enable-github-pages">Step 3: Enable GitHub Pages</h2>
<ol>
  <li>Go to the Settings tab of your repository.</li>
  <li>Scroll down to the Pages section (on the left sidebar or under “Code and Automation”).</li>
  <li>Under Branch, select the branch you want to publish (usually <code class="language-plaintext highlighter-rouge">main</code>) and click Save.</li>
  <li>GitHub will display the URL where your site is hosted, typically:
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>https://&lt;your-username&gt;.github.io/&lt;repository-name&gt;/
</code></pre></div>    </div>
  </li>
</ol>

<h2 id="step-4-test-your-website">Step 4: Test Your Website</h2>
<ol>
  <li>Open the URL provided in the GitHub Pages section.</li>
  <li>Verify that your website is displayed correctly.</li>
</ol>

<h2 id="step-5-customize-your-website-optional">Step 5: Customize Your Website (Optional)</h2>
<p>Enhance with Jekyll:</p>
<ul>
  <li>GitHub Pages supports Jekyll, a static site generator. Add a <code class="language-plaintext highlighter-rouge">_config.yml</code> file to customize themes, plugins, and layouts.</li>
</ul>

<h2 id="step-6-maintain-and-update-your-site">Step 6: Maintain and Update Your Site</h2>
<ol>
  <li>Update your website files locally.</li>
  <li>Push changes to the repository:
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>bash
git add .
git commit -m "Update website content"
git push
</code></pre></div>    </div>
  </li>
  <li>Changes will automatically reflect on your GitHub Page.</li>
</ol>

<h2 id="additional-tips">Additional Tips</h2>
<ul>
  <li>Check Themes: GitHub offers built-in themes for Jekyll sites. Go to Settings &gt; Pages &gt; Change Theme.</li>
  <li>Add SEO: Include a <code class="language-plaintext highlighter-rouge">robots.txt</code> and <code class="language-plaintext highlighter-rouge">sitemap.xml</code> for search engine optimization.</li>
  <li>Monitor Traffic: Use Google Analytics or similar tools to track visitors.</li>
</ul>]]></content><author><name>Busara Saelim</name><email>busara.saelim@gmail.com</email></author><summary type="html"><![CDATA[GitHub Pages is a free service that allows you to host websites directly from your GitHub repository. Follow this step-by-step guide to create your GitHub Page.]]></summary></entry><entry><title type="html">How to Use JIRA as a Business Analyst</title><link href="http://localhost:4000/https://busara-s.github.io/2025/01/17/howto-use-jira.html" rel="alternate" type="text/html" title="How to Use JIRA as a Business Analyst" /><published>2025-01-17T00:00:00+07:00</published><updated>2025-01-17T00:00:00+07:00</updated><id>http://localhost:4000/https://busara-s.github.io/2025/01/17/howto-use-jira</id><content type="html" xml:base="http://localhost:4000/https://busara-s.github.io/2025/01/17/howto-use-jira.html"><![CDATA[<p>JIRA is a powerful project management and issue-tracking tool widely used in Agile environments. For a Business Analyst (BA), JIRA is essential for managing requirements, tracking progress, and collaborating with the team.
<img src="\public\img\jira.png" alt="img" /></p>

<p>Here’s a guide on how a BA can effectively use JIRA to enhance their workflow.</p>

<h2 id="1-understand-jira-basics">1. Understand JIRA Basics</h2>
<h3 id="key-concepts-in-jira">Key Concepts in JIRA:</h3>
<ul>
  <li>Projects: The overarching container for all issues, boards, and configurations related to a specific initiative.</li>
  <li>Issues: The individual items tracked in JIRA, such as:
    <ul>
      <li>Epics: Large bodies of work broken down into stories or tasks.</li>
      <li>Stories: User requirements or functionalities.</li>
      <li>Tasks: General work items.</li>
      <li>Bugs: Problems or errors that need fixing.</li>
    </ul>
  </li>
  <li>Workflows: The sequence of statuses an issue moves through (e.g., To Do → In Progress → Done).</li>
</ul>

<h3 id="navigation">Navigation:</h3>
<ul>
  <li>Dashboards: Customize views for tracking progress and performance.</li>
  <li>Boards: Use Scrum or Kanban boards to visualize workflows.</li>
</ul>

<h2 id="2-set-up-and-manage-requirements">2. Set Up and Manage Requirements</h2>
<h3 id="create-and-organize-epics">Create and Organize Epics</h3>
<ul>
  <li>Purpose: Group related user stories under a single high-level theme.</li>
  <li>Steps:
    <ol>
      <li>Navigate to the project and click Create Issue.</li>
      <li>Select the Epic issue type.</li>
      <li>Add a meaningful title and description (e.g., “User Authentication”).</li>
      <li>Use the Epic to link related user stories.</li>
    </ol>
  </li>
</ul>

<h3 id="write-user-stories">Write User Stories</h3>
<ul>
  <li>Purpose: Capture requirements in a clear, actionable format.</li>
  <li>Steps:
    <ol>
      <li>Create a new issue and select Story as the issue type.</li>
      <li>Use the User Story Format:
        <ul>
          <li><em>As a [type of user], I want [goal] so that [benefit]</em>.</li>
          <li>Example: “As a user, I want to reset my password so that I can access my account if I forget it.”</li>
        </ul>
      </li>
      <li>Add Acceptance Criteria:
        <ul>
          <li>Clearly define what needs to be achieved for the story to be complete.</li>
          <li>Example:
            <ul>
              <li>The user receives a password reset email.</li>
              <li>The new password is validated and saved.</li>
            </ul>
          </li>
        </ul>
      </li>
    </ol>
  </li>
</ul>

<h3 id="prioritize-and-add-details">Prioritize and Add Details</h3>
<ul>
  <li>Use the Priority field to indicate the importance of each issue (e.g., High, Medium, Low).</li>
  <li>Add attachments, screenshots, or diagrams for clarity.</li>
</ul>

<h2 id="3-collaborate-with-the-team">3. Collaborate with the Team</h2>
<h3 id="commenting">Commenting</h3>
<p>Use the Comment section in issues to ask questions, provide updates, or clarify requirements.
Tag team members using <code class="language-plaintext highlighter-rouge">@username</code> to notify them directly.</p>

<h3 id="link-issues">Link Issues</h3>
<ul>
  <li>Link related tasks, bugs, or stories to maintain traceability.
    <ul>
      <li>Example: Link a bug to the corresponding story it affects.</li>
    </ul>
  </li>
</ul>

<h3 id="assign-issues">Assign Issues</h3>
<ul>
  <li>Assign tasks to team members to ensure ownership and accountability.</li>
</ul>

<h2 id="4-use-jira-boards-to-track-progress">4. Use JIRA Boards to Track Progress</h2>
<p><img src="\public\img\scrumboard.png" alt="img" /></p>
<h3 id="scrum-board">Scrum Board</h3>
<ul>
  <li>Purpose: Visualize the sprint workflow.</li>
  <li>Steps:
    <ol>
      <li>Monitor tasks in columns like To Do, In Progress, and Done.</li>
      <li>Move issues across columns as work progresses.</li>
      <li>Participate in sprint ceremonies (planning, review, and retrospective) with the board as a central tool.</li>
    </ol>
  </li>
</ul>

<h3 id="kanban-board">Kanban Board</h3>
<ul>
  <li>Purpose: Track continuous workflows.</li>
  <li>Steps:
    <ol>
      <li>Manage work in progress (WIP) limits.</li>
      <li>Prioritize tasks and move them across the workflow.</li>
    </ol>
  </li>
</ul>

<h2 id="5-facilitate-backlog-grooming">5. Facilitate Backlog Grooming</h2>
<p><img src="\public\img\jirabacklog.png" alt="img" /></p>
<h3 id="steps">Steps:</h3>
<ol>
  <li>Review the backlog with the Product Owner and team.</li>
  <li>Update or refine user stories with detailed descriptions or acceptance criteria.</li>
  <li>Prioritize stories based on business value or dependencies.</li>
  <li>Identify and split large stories into smaller, deliverable tasks.</li>
</ol>

<h2 id="6-generate-and-use-reports">6. Generate and Use Reports</h2>
<ul>
  <li>Purpose: Gain insights into team performance and project progress.</li>
  <li>Common Reports for BAs:
    <ul>
      <li>Sprint Report: Highlights completed and incomplete work in a sprint.</li>
      <li>Burndown Chart: Tracks work progress against sprint timelines.</li>
      <li>Velocity Chart: Shows the average amount of work completed across sprints.</li>
      <li>Issue Statistics: Provides insights into the number and types of issues.</li>
    </ul>
  </li>
</ul>

<h3 id="steps-1">Steps:</h3>
<ol>
  <li>Navigate to the Reports section in the project.</li>
  <li>Select the desired report type.</li>
  <li>Customize filters to view specific data (e.g., by assignee, issue type, or priority).</li>
</ol>

<h2 id="7-manage-change-requests">7. Manage Change Requests</h2>
<h3 id="steps-2">Steps:</h3>
<ol>
  <li>Create a new issue or update an existing one to reflect the change request.</li>
  <li>Add a clear description, including the rationale for the change and its impact.</li>
  <li>Link the change request to relevant stories, epics, or tasks.</li>
  <li>Track the request’s progress through the workflow.</li>
</ol>

<h2 id="8-best-practices-for-using-jira-as-a-ba">8. Best Practices for Using JIRA as a BA</h2>
<ul>
  <li>Consistency: Use standardized naming conventions for epics, stories, and tasks.</li>
  <li>Clear Descriptions: Ensure issues have detailed and actionable descriptions.</li>
  <li>Collaborate Frequently: Engage with the team daily to address questions or blockers.</li>
  <li>Keep Issues Updated: Ensure JIRA reflects the current state of work.</li>
</ul>

<h2 id="tools-and-features-to-enhance-your-workflow">Tools and Features to Enhance Your Workflow</h2>
<ol>
  <li>Confluence Integration: Link documentation to JIRA issues for seamless access to detailed requirements.</li>
  <li>JIRA Query Language (JQL): Use advanced searches to find and filter issues efficiently.
    <ul>
      <li>Example: <code class="language-plaintext highlighter-rouge">status = "In Progress" AND assignee = currentUser()</code>.</li>
    </ul>
  </li>
  <li>Automation Rules: Set up automated workflows, such as assigning tasks or sending notifications when an issue status changes.</li>
</ol>

<h2 id="conclusion">Conclusion</h2>
<p>JIRA is an indispensable tool for Business Analysts working in Agile environments. By mastering its features and aligning them with Agile principles, you can streamline requirement management, enhance team collaboration, and ensure successful project delivery.</p>]]></content><author><name>Busara Saelim</name><email>busara.saelim@gmail.com</email></author><summary type="html"><![CDATA[JIRA is a powerful project management and issue-tracking tool widely used in Agile environments. For a Business Analyst (BA), JIRA is essential for managing requirements, tracking progress, and collaborating with the team.]]></summary></entry><entry><title type="html">What a Business Analyst Does Daily in an Agile Project</title><link href="http://localhost:4000/https://busara-s.github.io/2025/01/16/ba-in-agileproject.html" rel="alternate" type="text/html" title="What a Business Analyst Does Daily in an Agile Project" /><published>2025-01-16T00:00:00+07:00</published><updated>2025-01-16T00:00:00+07:00</updated><id>http://localhost:4000/https://busara-s.github.io/2025/01/16/ba-in-agileproject</id><content type="html" xml:base="http://localhost:4000/https://busara-s.github.io/2025/01/16/ba-in-agileproject.html"><![CDATA[<p><img src="\public\img\agile.png" alt="img" />
In an Agile environment, a Business Analyst (BA) plays a vital role as a bridge between stakeholders and the development team. Their day-to-day activities focus on ensuring that the team delivers solutions that align with business goals and stakeholder needs.</p>

<p>Here’s a breakdown of what a BA typically does on a daily basis when working in an Agile project:
<img src="\public\img\scrum.png" alt="img" /></p>

<h2 id="1-participate-in-daily-standups">1. Participate in Daily Standups</h2>
<ul>
  <li>Purpose: Attend a 15-minute team meeting (Scrum or Kanban standup) to:
    <ul>
      <li>Track progress on tasks.</li>
      <li>Identify blockers impacting requirements or the team’s understanding.</li>
      <li>Provide updates on requirements or upcoming deliverables.</li>
    </ul>
  </li>
  <li>Example: The BA might clarify why a specific feature is prioritized or address team questions about user stories.</li>
</ul>

<h2 id="2-collaborate-with-the-product-owner">2. Collaborate with the Product Owner</h2>
<ul>
  <li>Work closely with the Product Owner to:
    <ul>
      <li>Prioritize the product backlog based on business value and stakeholder needs.</li>
      <li>Refine high-priority user stories to ensure they are ready for the sprint.</li>
    </ul>
  </li>
  <li>Example: The BA reviews user feedback with the Product Owner and helps adjust the backlog to reflect shifting business priorities.</li>
</ul>

<h2 id="3-refine-user-stories">3. Refine User Stories</h2>
<ul>
  <li>Ensure user stories are:
    <ul>
      <li>Well-defined with clear acceptance criteria.</li>
      <li>Split into manageable, deliverable tasks.</li>
      <li>Properly aligned with the Definition of Ready (DoR) for sprint planning.</li>
    </ul>
  </li>
  <li>Example: Breaking down a feature request into smaller stories with detailed requirements, such as “As a user, I want to reset my password securely so I can access my account.”</li>
</ul>

<h2 id="4-facilitate-communication">4. Facilitate Communication</h2>
<ul>
  <li>Act as the liaison between technical teams and non-technical stakeholders to ensure mutual understanding.</li>
  <li>Translate business needs into technical language and vice versa.</li>
  <li>Example: Explaining the implications of a technical limitation to stakeholders or clarifying business rules for developers.</li>
</ul>

<h2 id="5-conduct-requirement-analysis">5. Conduct Requirement Analysis</h2>
<ul>
  <li>Continuously gather and analyze requirements to ensure they are clear, feasible, and aligned with business objectives.</li>
  <li>Document additional insights or updates based on team feedback and evolving project needs.</li>
  <li>Example: Meeting with stakeholders to understand how a process improvement should work and ensuring this is accurately reflected in user stories.</li>
</ul>

<h2 id="6-support-sprint-planning">6. Support Sprint Planning</h2>
<ul>
  <li>Assist the team in planning the sprint by:
    <ul>
      <li>Ensuring user stories have enough detail for implementation.</li>
      <li>Answering questions about priority or scope.</li>
      <li>Highlighting dependencies or risks.</li>
    </ul>
  </li>
  <li>Example: The BA might confirm whether integrating with an external API can happen in the current sprint or if it needs further investigation.</li>
</ul>

<h2 id="7-perform-backlog-grooming">7. Perform Backlog Grooming</h2>
<ul>
  <li>Collaborate with the Product Owner and team to review and refine the backlog:
    <ul>
      <li>Remove outdated or irrelevant items.</li>
      <li>Update or reprioritize stories based on feedback or changing requirements.</li>
    </ul>
  </li>
  <li>Example: Reviewing a low-priority item in the backlog and deciding to revise its description or move it higher in priority.</li>
</ul>

<h2 id="8-assist-with-testing-and-validation">8. Assist with Testing and Validation</h2>
<ul>
  <li>Collaborate with QA teams to validate that the delivered solution meets requirements.</li>
  <li>Write test cases or acceptance criteria that the QA team can use for validation.</li>
  <li>Participate in UAT (User Acceptance Testing) with stakeholders.</li>
  <li>Example: Verifying that a new feature allows users to complete a workflow exactly as described in the user story.</li>
</ul>

<h2 id="9-facilitate-stakeholder-engagement">9. Facilitate Stakeholder Engagement</h2>
<ul>
  <li>Organize and lead meetings or workshops with stakeholders to gather feedback, validate requirements, and ensure alignment.</li>
  <li>Keep stakeholders informed of progress, risks, and any decisions made.</li>
  <li>Example: Hosting a sprint demo to showcase completed work and gather input from stakeholders.</li>
</ul>

<h2 id="10-monitor-metrics-and-improve-processes">10. Monitor Metrics and Improve Processes</h2>
<ul>
  <li>Review key metrics, such as velocity or defect rates, to identify areas for improvement.</li>
  <li>Work with the team to refine processes during retrospectives.</li>
  <li>Example: Proposing that user stories include more detailed acceptance criteria to reduce miscommunication during development.</li>
</ul>

<h2 id="11-handle-change-requests">11. Handle Change Requests</h2>
<ul>
  <li>Evaluate the impact of new or updated requirements and communicate these changes to the team and stakeholders.</li>
  <li>Ensure changes are prioritized and managed within the Agile framework.</li>
  <li>Example: A stakeholder requests a new feature mid-sprint, and the BA helps assess its priority and whether it should wait for the next sprint.</li>
</ul>

<h2 id="12-continuous-learning-and-improvement">12. Continuous Learning and Improvement</h2>
<ul>
  <li>Keep up with domain knowledge, tools, and Agile best practices to enhance project delivery.</li>
  <li>Participate in training or mentorship opportunities to grow professionally.</li>
  <li>Example: Taking a short course on Agile metrics to better evaluate project success.</li>
</ul>

<h2 id="tools-a-business-analyst-uses-in-agile">Tools a Business Analyst Uses in Agile</h2>
<ul>
  <li><a href="https://www.atlassian.com/software/jira">Jira</a>: For managing user stories and tracking progress.
<img src="\public\img\jira.png" alt="img" /></li>
  <li><a href="https://www.atlassian.com/software/confluence">Confluence</a>: For documenting requirements and facilitating collaboration.</li>
  <li><a href="https://miro.com/">Miro</a> or <a href="https://lucid.co/">Lucidchart</a>: For creating process flows or diagrams.</li>
  <li><a href="https://slack.com/">Slack</a> or <a href="https://www.microsoft.com/en-us/microsoft-teams/group-chat-software">Microsoft Teams</a>: For real-time communication.
<img src="\public\img\slack.png" alt="img" /></li>
</ul>

<h2 id="conclusion">Conclusion</h2>
<p>A Business Analyst in Agile is a critical player in aligning business goals with technical delivery. By engaging in these activities daily, the BA ensures the team stays focused on delivering value while maintaining flexibility and responsiveness to change.</p>]]></content><author><name>Busara Saelim</name><email>busara.saelim@gmail.com</email></author><summary type="html"><![CDATA[In an Agile environment, a Business Analyst (BA) plays a vital role as a bridge between stakeholders and the development team. Their day-to-day activities focus on ensuring that the team delivers solutions that align with business goals and stakeholder needs.]]></summary></entry></feed>