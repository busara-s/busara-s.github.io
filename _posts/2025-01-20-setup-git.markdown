---
layout: post
title: How to Set Up Git- A Step-by-Step Guide
thumbnail: \public\apple-touch-icon-144-precomposed.png
---
Git is a popular version control system used by developers to track code changes, collaborate with others, and manage project versions. This guide will walk you through setting up Git on your local machine.

## Step 1: Install Git
### On Windows:
1. Download the Git installer from the [Git](https://git-scm.com/) website.
2. Run the installer and follow the prompts:
    ![img](\public\img\git_install.png)
    * Select the default editor (e.g., Vim, Nano, or Notepad++).
    * Choose "Git from the command line and also from 3rd-party software."
    * Use the recommended options unless you have specific preferences.  
3. Click Finish to complete the installation.

### On macOS:
1. Open Terminal.
2. Install Git using Homebrew:
```
bash
brew install git
```

### On Linux:
1. Open Terminal.
2. Install Git using your package manager:
    * Ubuntu/Debian:
        ```
        bash
        sudo apt update
        sudo apt install git
        ```
    * Fedora:
        ```
        bash
        sudo dnf install git
        ```

## Step 2: Verify the Installation
Once installed, verify Git by checking its version:
```
bash
git --version
```
![img](\public\img\git_ver.png)
If Git is installed, it will display the installed version.

## Step 3: Configure Git
Before using Git, configure your identity and preferences.

### Set Your Name and Email:
Run the following commands to set your name and email address:
```
bash
git config --global user.name "Your Name"
git config --global user.email "your.email@example.com"
```
### Check Your Configuration:
To see the settings you've configured, use:
```
bash
git config --list
```

## Step 4: Set Up SSH (Optional)
Using SSH keys makes it easier and more secure to interact with remote repositories.

1. Generate an SSH Key:
```
bash
ssh-keygen -t rsa -b 4096 -C "your.email@example.com"
```
Press Enter to save the key in the default location and set a passphrase (optional).
2. Add the SSH Key to the Agent:
```
bash
eval "$(ssh-agent -s)"
ssh-add ~/.ssh/id_rsa
```
3. Add the SSH Key to Your GitHub Account:
* Copy the SSH key:
    ```
    bash
    cat ~/.ssh/id_rsa.pub
    ```
* Go to your GitHub profile > Settings > SSH and GPG keys > New SSH key.
* Paste the copied key and save.

## Step 5: Create a Git Repository
### Initialize a Local Repository:
1. Navigate to the folder you want to track:
```
bash
cd /path/to/your/project
```
2. Initialize Git in the folder:
```
bash
git init
```
### Clone a Remote Repository:
If youâ€™re working on an existing project, clone the repository:
```
bash
git clone <repository-url>
```

## Step 6: Basic Git Commands
Here are some essential Git commands to get you started:

### Add Files to the Staging Area:
```
bash
git add <file-name>        # Add a specific file
git add .                  # Add all changes in the current directory
```
### Commit Changes:
```
bash
git commit -m "Your commit message"
```
### Push Changes to Remote:
```
bash
git push origin main       # Push changes to the main branch
```
### Pull Changes from Remote:
```
bash
git pull origin main       # Pull updates from the main branch
```
### Check the Status of Your Repository:
```
bash
git status
```
### View Commit History:
```
bash
git log
```

## Step 7: Advanced Configuration (Optional)
### Set a Default Branch Name:
Change the default branch name (e.g., to `main`):
```
bash
git config --global init.defaultBranch main
```
### Enable Git Aliases:
Set up shortcuts for common commands:
```
bash
git config --global alias.st status
git config --global alias.co checkout
git config --global alias.br branch
git config --global alias.cm commit
```
Now you can use `git st` instead of `git status`, and so on.

## Step 8: Practice Git with a Sample Workflow
1. Create a file in your project:
```
bash
echo "Hello, Git!" > hello.txt
```
2. Add the file to the staging area:
```
bash
git add hello.txt
```
3. Commit the changes:
```
bash
git commit -m "Add hello.txt"
```
4. Push the changes to a remote repository:
```
bash
git remote add origin <repository-url>
git push -u origin main
```

## Step 9: Explore Further
Learn more advanced Git features like branching, merging, and rebasing.
Use GUIs for Git like [GitHub Desktop](https://github.com/apps/desktop) or [Sourcetree](https://www.sourcetreeapp.com/).


